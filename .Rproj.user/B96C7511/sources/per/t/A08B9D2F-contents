---
title: "Class Analysis R Notebook"
author: "Carter Hanford"
date: '(`r format(Sys.time(), "%B %d, %Y")`)'
output: 
  github_document: default
  html_notebook: default 
---

## Introduction

This is the R notebook for my empirical study on race, class, and socioeconomic status in urban spaces.This project was completed in December 2018 for my sociology capstone at Saint Louis University. The project spanned 6 months, with brainstorming beginning at the end of summer in late July, and ending in December with a presentation discussing my findings in front of faculty in the sociology department at SLU.

## Load Dependencies

The following code chunk will load the packages necessary for our analysis.

```{r load-packages}
library(here) # file directory
library(dplyr) # data cleaning
library(janitor) # data cleaning
library(naniar) # missing data analysis
library(readr) # writing csv files
```

## Load Data

The following code chunk will load the 2016 General Social Survey data into our global network.

```{r data-load}
load(here("data", "rawData", "gss16.rda"))
```

## Part 1: Cleaning the Data

The file we just loaded into our global environment contains all of the data in the 2016 GSS. This includes evey single category and every single observation. Before the cleaning begins, the GSS data has 961 variables and 2867 observations.  

Our analysis revolves around social class, race, and socioeconomic status. Therefore, we do not need all of the variables in the data set. Since we are looking at different variables that influence socioeconomic status, we will designate `SEI10` as our dependent variable and sole outcome. By anchoring socioeconomic status as our dependent variable, we can now select other variables from the GSS that reflect class and race characteristics. Firstly, we will select `ID`, which simply tells us the ID number of the respondent Gender,race, and age are obviously important here, so we will also select the variables `SEX`, `RACE`, and `AGE`. 

Since socioeconomic status is the outcome, variables related to income and the work force would be imporant to include. We will also select the variables, `RINCOME`, `WRKSTAT`, `HRS1`, `PRESTIGE`. 

* `RINCOME` represents the average income of the respondent last year.
* `WRKSTAT` represents the labor force status of the respondent.
* `HRS1` represents the number of hours the respondent worked last week..
* `PRESTIGE` represents the respondents occupational prestige score.

Education is also important in understanding socioeconomic status, so we will also select the `EDUC` variable to tell us the highest level of education completed by the respondent.

Finally, it is important to note that the purpose of the General Social Survey is to represent the United States population to the best of its ability. This means that the GSS aims to include every single respondent from every single region. Our analysis is only interested in urban areas, so we will include the variable, `SRCBELT` to designate which areas of the U.S. we are interested in.

### Variable Select / Filter

Now we will actually select these variables from our data set.

```{r variable-select}
gss16 %>%
  select(SEI10, ID, SEX, RACE, AGE, INCOME16, WRKSTAT, EDUC, SRCBELT, MARITAL) -> gssData
```

Now, since we want to focus on metropolitan areas, we will filter `SRCBELT` into 1, 2, and 3, which accurately describes the makeup of most metropolitan cities.

```{r filter}
gssData %>%
  mutate(Urban = ifelse(SRCBELT == "(1) 12 LRGST SMSA'S" | SRCBELT == "(2) SMSA'S 13-100" | SRCBELT == "(3) SUBURB, 12 LRGST" | SRCBELT == "(5) OTHER URBAN", TRUE, FALSE)) -> gssDatasub
```

```{r}
gssDatasub$Urban <- as.numeric(gssDatasub$Urban)
```

```{r}
gssDatasub %>%
  mutate(Married = ifelse(MARITAL == "(1) MARRIED", TRUE, FALSE)) %>%
  mutate(NotMarried = ifelse(MARITAL == "(5) NEVER MARRIED" | MARITAL == "(2) WIDOWED" | MARITAL == "(3) DIVORCED" | MARITAL == "(4) SEPARATED", TRUE, FALSE)) -> gssDatasub
```


We see that there are instances of missing data. Typically, for data analyses, we try not to use variables with more thatn 5% of missing data present. `INCOME16` has 9.4% missing data, but it is one of the most important indicators of socioeconomic status, so we will still include it in our analysis and be sure to address the error that it may cause.

We now want to create binary variables out of our `RACE` and `GENDER` variables so that it will be more intuitive to understand once we run regression tests. 

```{r binary-variables}
gssDatasub %>%
  mutate(Black = ifelse(RACE == "(2) BLACK", TRUE, FALSE)) %>%
  mutate(White = ifelse(RACE == "(1) WHITE", TRUE, FALSE)) %>%
  mutate(Other = ifelse(RACE == "(3) OTHER", TRUE, FALSE)) %>%
  mutate(Male = ifelse(SEX == "(1) MALE", TRUE, FALSE)) %>%
  mutate(Female = ifelse(SEX == "(2) FEMALE", TRUE, FALSE)) -> gssDatasub
```

Now that these variables are binary, we want to read them as numeric data.

```{r binary-race-gender}
gssDatasub$Black <- as.numeric(gssDatasub$Black)
gssDatasub$White <- as.numeric(gssDatasub$White)
gssDatasub$Other <- as.numeric(gssDatasub$Other)
gssDatasub$Male <- as.numeric(gssDatasub$Male)
gssDatasub$Female <- as.numeric(gssDatasub$Female)
gssDatasub$RACE <- as.numeric(gssDatasub$RACE)
gssDatasub$Married <- as.numeric(gssDatasub$Married)
gssDatasub$NotMarried <- as.numeric(gssDatasub$NotMarried)
```

Next we want to follow the same binary variable creation process as we just did, but apply it to working status.

```{r binary-variables1}
gssDatasub %>%
  mutate(Fulltime = ifelse(WRKSTAT == "(1) WORKING FULLTIME", TRUE, FALSE)) %>%
  mutate(Parttime = ifelse(WRKSTAT == "(2) WORKING PARTTIME", TRUE, FALSE)) %>%
  mutate(NotWorking = ifelse(WRKSTAT == "(3) TEMP NOT WORKING", TRUE, FALSE))%>%
  mutate(Unemployed = ifelse(WRKSTAT == "(4) UNEMPL, LAID OFF", TRUE, FALSE)) %>%
  mutate(KeepingHouse = ifelse(WRKSTAT == "(7) KEEPING HOUSE" | WRKSTAT == "(8) OTHER", TRUE, FALSE)) %>%
  mutate(Retired = ifelse(WRKSTAT == "(5) RETIRED", TRUE, FALSE)) %>%
  mutate(AtSchool = ifelse(WRKSTAT == "(6) SCHOOL", TRUE, FALSE)) -> gssDatasub
```

```{r}
gssDatasub$Fulltime <- as.numeric(gssDatasub$Fulltime)
gssDatasub$Parttime <- as.numeric(gssDatasub$Parttime)
gssDatasub$NotWorking <- as.numeric(gssDatasub$NotWorking)
gssDatasub$Retired <- as.numeric(gssDatasub$Retired)
gssDatasub$AtSchool <- as.numeric(gssDatasub$AtSchool)
gssDatasub$KeepingHouse <- as.numeric(gssDatasub$KeepingHouse)
gssDatasub$Unemployed <- as.numeric(gssDatasub$Unemployed)
```

We also want all of the remaining variables, `INCOME16`, `WRKSTAT`, and `EDUC` to be numerical values so that they will adhere to our statistical tests.

```{r numeric-remaining}
gssDatasub$INCOME16 <- as.numeric(gssDatasub$INCOME16)
gssDatasub$WRKSTAT <- as.numeric(gssDatasub$WRKSTAT)
gssDatasub$EDUC <- as.numeric(gssDatasub$EDUC)
```

Now that we have cleaned the data, we will assess missing data that may be prevelant and then get rid of it.

```{r missing-data}
miss_var_summary(gssDatasub)
```

```{r}
gssDatasub <- na.omit(gssDatasub)
```

Finally, our data is fully cleaned, and all necessary variables were converted to numeric and binary.  Now we can create a new subset of the new variables, and then export it as a .csv file to our data folder.

```{r}
gssDatasub %>%
  select(SEI10, ID, AGE, INCOME16, -WRKSTAT, EDUC, -SRCBELT, RACE, Black, White, Other, Male, Female, Urban, Fulltime, Parttime, NotWorking, Unemployed, KeepingHouse, Retired, AtSchool) -> gss2016Clean
```

```{r}
write_csv(gss2016Clean, here("data", "cleanData", "gss2016Clean.csv"))
```

